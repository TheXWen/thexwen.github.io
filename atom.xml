<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xw&#39;s Blog</title>
  
  <subtitle>记录,分享</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://thexwen.github.io/"/>
  <updated>2020-03-31T15:44:22.688Z</updated>
  <id>http://thexwen.github.io/</id>
  
  <author>
    <name>xw</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring Boot使用阿里云OSS实现图片上传</title>
    <link href="http://thexwen.github.io/2020/03/31/Spring-Boot%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91OSS%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0/"/>
    <id>http://thexwen.github.io/2020/03/31/Spring-Boot%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91OSS%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0/</id>
    <published>2020-03-31T15:22:53.000Z</published>
    <updated>2020-03-31T15:44:22.688Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="1-在Maven项目中加入依赖项"><a href="#1-在Maven项目中加入依赖项" class="headerlink" title="1.在Maven项目中加入依赖项"></a>1.在Maven项目中加入依赖项</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.aliyun.oss&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;aliyun-sdk-oss&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.8.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="2-获取AccessKey"><a href="#2-获取AccessKey" class="headerlink" title="2.获取AccessKey"></a>2.获取AccessKey</h2><p>登录阿里云，在个人头像下面有一个AccessKey管理选项，点击进入创建一个AccessKey</p><a id="more"></a><p><img src="/2020/03/31/Spring-Boot%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91OSS%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0/AccessKey.JPG" alt="创建AccessKey"></p><h2 id="3-创建一个Bucket"><a href="#3-创建一个Bucket" class="headerlink" title="3.创建一个Bucket"></a>3.创建一个Bucket</h2><p>在阿里云的对象存储创建一个Bucket</p><h2 id="4-编写上传类"><a href="#4-编写上传类" class="headerlink" title="4.编写上传类"></a>4.编写上传类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AliyunProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">""</span>)</span><br><span class="line">    <span class="keyword">private</span> String AccessKeyID;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">""</span>)</span><br><span class="line">    <span class="keyword">private</span> String AccessKeySecret;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(InputStream fileStream, String fileName)</span></span>&#123; <span class="comment">//fileStream:文件流 fileName:文件名</span></span><br><span class="line">        String endpoint = <span class="string">""</span>; <span class="comment">//根据自己的地域填写</span></span><br><span class="line">        String accessKeyId = AccessKeyID;</span><br><span class="line">        String accessKeySecret = AccessKeySecret;</span><br><span class="line">        String bucketName = <span class="string">""</span>; <span class="comment">//根据自己的bucketName填写</span></span><br><span class="line"><span class="comment">//随机生成文件名</span></span><br><span class="line">        String generatedFileName = <span class="string">""</span>;</span><br><span class="line">        String[] filePaths = fileName.split(<span class="string">"\\."</span>);</span><br><span class="line">        <span class="keyword">if</span> (filePaths.length &gt; <span class="number">1</span>)&#123;</span><br><span class="line">            generatedFileName = UUID.randomUUID().toString() + <span class="string">"."</span> + filePaths[filePaths.length - <span class="number">1</span>];</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建OSSClient实例。</span></span><br><span class="line">        OSS ossClient = <span class="keyword">new</span> OSSClientBuilder().build(endpoint, accessKeyId, accessKeySecret);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建存储空间。</span></span><br><span class="line">        ossClient.createBucket(bucketName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 上传文件流。</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ossClient.putObject(bucketName, generatedFileName, fileStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭OSSClient。</span></span><br><span class="line">        ossClient.shutdown();</span><br><span class="line">        <span class="keyword">return</span> generatedFileName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上，就是阿里云OSS实现图片上传的流程</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-在Maven项目中加入依赖项&quot;&gt;&lt;a href=&quot;#1-在Maven项目中加入依赖项&quot; class=&quot;headerlink&quot; title=&quot;1.在Maven项目中加入依赖项&quot;&gt;&lt;/a&gt;1.在Maven项目中加入依赖项&lt;/h2&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;groupId&amp;gt;com.aliyun.oss&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;artifactId&amp;gt;aliyun-sdk-oss&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;version&amp;gt;3.8.0&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;2-获取AccessKey&quot;&gt;&lt;a href=&quot;#2-获取AccessKey&quot; class=&quot;headerlink&quot; title=&quot;2.获取AccessKey&quot;&gt;&lt;/a&gt;2.获取AccessKey&lt;/h2&gt;&lt;p&gt;登录阿里云，在个人头像下面有一个AccessKey管理选项，点击进入创建一个AccessKey&lt;/p&gt;
    
    </summary>
    
    
      <category term="分享" scheme="http://thexwen.github.io/categories/%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="OSS" scheme="http://thexwen.github.io/tags/OSS/"/>
    
      <category term="Spring Boot" scheme="http://thexwen.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>调用Gitee/Github API实现第三方登录流程</title>
    <link href="http://thexwen.github.io/2020/03/24/%E8%B0%83%E7%94%A8Gitee-Github-API%E5%AE%9E%E7%8E%B0%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95%E6%B5%81%E7%A8%8B/"/>
    <id>http://thexwen.github.io/2020/03/24/%E8%B0%83%E7%94%A8Gitee-Github-API%E5%AE%9E%E7%8E%B0%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95%E6%B5%81%E7%A8%8B/</id>
    <published>2020-03-24T12:00:54.000Z</published>
    <updated>2020-03-24T14:16:43.938Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="1-创建一个Gitee-Github第三方应用"><a href="#1-创建一个Gitee-Github第三方应用" class="headerlink" title="1.创建一个Gitee/Github第三方应用"></a>1.创建一个Gitee/Github第三方应用</h2><p>这里以Gitee为例<br><img src="/2020/03/24/%E8%B0%83%E7%94%A8Gitee-Github-API%E5%AE%9E%E7%8E%B0%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95%E6%B5%81%E7%A8%8B/NewGiteeOAuthApp.JPG" alt="创建Gitee第三方应用"></p><h2 id="2-新建两个java类用来储存获取的Gitee-Github用户信息和获取token所需的参数"><a href="#2-新建两个java类用来储存获取的Gitee-Github用户信息和获取token所需的参数" class="headerlink" title="2.新建两个java类用来储存获取的Gitee/Github用户信息和获取token所需的参数"></a>2.新建两个java类用来储存获取的Gitee/Github用户信息和获取token所需的参数</h2><p>储存Github/Gitee用户信息类，生成get/set方法，我这里为了省空间就不写了</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class GithubUser &#123;</span><br><span class="line">    private String name; &#x2F;&#x2F;用户名称</span><br><span class="line">    private String id;&#x2F;&#x2F;用户ID</span><br><span class="line">    private String bio; &#x2F;&#x2F;用户描述</span><br><span class="line">    private String avatar_url; &#x2F;&#x2F;用户头像地址</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>储存获取token所需的参数类，生成get/set方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class AccessTokenDTO &#123;</span><br><span class="line">    private String client_id;&#x2F;&#x2F;client_id</span><br><span class="line">    private String client_secret;&#x2F;&#x2F;client_secret</span><br><span class="line">    private String code;&#x2F;&#x2F;code码</span><br><span class="line">    private String redirect_uri;&#x2F;&#x2F;回调地址</span><br><span class="line">    &#x2F;&#x2F;private String state;&#x2F;&#x2F;Github需要这个参数，Gitee不需要</span><br><span class="line">    private String grant_type;&#x2F;&#x2F;Github不需要这个参数，Gitee需要</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-导入两个包，方便后续使用"><a href="#3-导入两个包，方便后续使用" class="headerlink" title="3.导入两个包，方便后续使用"></a>3.导入两个包，方便后续使用</h2><p>在pom文件中导入两个包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 方便发送get&#x2F;post请求 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.squareup.okhttp3&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;okhttp&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.14.1&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- json和String类型快速转换 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;fastjson&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.57&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="4-获取用户信息"><a href="#4-获取用户信息" class="headerlink" title="4.获取用户信息"></a>4.获取用户信息</h2><h3 id="4-1-在需要登录的位置添加链接"><a href="#4-1-在需要登录的位置添加链接" class="headerlink" title="4.1 在需要登录的位置添加链接"></a>4.1 在需要登录的位置添加链接</h3><p>Github地址<code>https://github.com/login/oauth/authorize?client_id=创建应用给的id&amp;redirect_uri=回调地址&amp;scope=user&amp;state=1</code><br>Gitee地址<code>https://gitee.com/oauth/authorize?client_id=创建应用给的id&amp;redirect_uri=回调地址&amp;response_type=code</code></p><h3 id="4-2-新建一个控制器类"><a href="#4-2-新建一个控制器类" class="headerlink" title="4.2 新建一个控制器类"></a>4.2 新建一个控制器类</h3><p>发送Git请求获取code码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">    private GithubProvider githubProvider;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private AuthorizeService authorizeService;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;你的clientId&quot;)</span><br><span class="line">    private String clientId;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;你的clientSecret&quot;)</span><br><span class="line">    private String clientSecret;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;你的回调地址&quot;)</span><br><span class="line">    private String redirectUri;</span><br><span class="line"></span><br><span class="line">@GetMapping(&quot;&#x2F;callback&quot;)</span><br><span class="line">    public String callback(@RequestParam(name &#x3D; &quot;code&quot;) String code,</span><br><span class="line">                           HttpServletResponse response)&#123;&#x2F;&#x2F;@RequestParam(name &#x3D; &quot;state&quot;) String state, Github需要这个参数</span><br><span class="line">        AccessTokenDTO accessTokenDTO &#x3D; new AccessTokenDTO();</span><br><span class="line">        accessTokenDTO.setClient_id(clientId);</span><br><span class="line">        accessTokenDTO.setClient_secret(clientSecret);</span><br><span class="line">        accessTokenDTO.setCode(code);</span><br><span class="line">        accessTokenDTO.setRedirect_uri(redirectUri);</span><br><span class="line">        accessTokenDTO.setGrant_type(&quot;authorization_code&quot;);&#x2F;&#x2F;Gitee需要这个参数</span><br><span class="line">        &#x2F;&#x2F;accessTokenDTO.setState(state); &#x2F;&#x2F;Github需要这个参数</span><br><span class="line">        String accessToken &#x3D; githubProvider.getAccessToken(accessTokenDTO);&#x2F;&#x2F;获取token方法</span><br><span class="line">        GithubUser githubUser &#x3D; githubProvider.getUser(accessToken);&#x2F;&#x2F;获取User信息方法</span><br><span class="line">        if (githubUser !&#x3D; null &amp;&amp; githubUser.getId() !&#x3D; null)&#123;&#x2F;&#x2F;如果不为空，插入数据库</span><br><span class="line">            User user &#x3D; new User();</span><br><span class="line">            String token &#x3D; UUID.randomUUID().toString();</span><br><span class="line">            user.setName(githubUser.getName());</span><br><span class="line">            user.setToken(token);</span><br><span class="line">            user.setAccountId(githubUser.getId());</span><br><span class="line">            user.setAvatarUrl(githubUser.getAvatar_url());</span><br><span class="line">            authorizeService.insertUser(user);</span><br><span class="line">            response.addCookie(new Cookie(&quot;token&quot;, token));&#x2F;&#x2F;添加cookie</span><br><span class="line">            return &quot;redirect:&#x2F;&quot;;&#x2F;&#x2F;返回主页</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            &#x2F;&#x2F;登录失败，重新登录</span><br><span class="line">            return &quot;redirect:&#x2F;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-新建一个类，写获取token的方法和获取User信息的方法"><a href="#4-3-新建一个类，写获取token的方法和获取User信息的方法" class="headerlink" title="4.3 新建一个类，写获取token的方法和获取User信息的方法"></a>4.3 新建一个类，写获取token的方法和获取User信息的方法</h3><p>携带参数发送POST请求获取token<br>获取token的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public String getAccessToken(AccessTokenDTO accessTokenDTO)&#123;</span><br><span class="line">MediaType mediaType &#x3D; MediaType.get(&quot;application&#x2F;json; charset&#x3D;utf-8&quot;);</span><br><span class="line">OkHttpClient client &#x3D; new OkHttpClient();</span><br><span class="line"></span><br><span class="line">RequestBody body &#x3D; RequestBody.create(mediaType, JSON.toJSONString(accessTokenDTO));</span><br><span class="line">Request request &#x3D; new Request.Builder()</span><br><span class="line">.url(&quot;https:&#x2F;&#x2F;gitee.com&#x2F;oauth&#x2F;token&quot;)&#x2F;&#x2F;https:&#x2F;&#x2F;github.com&#x2F;login&#x2F;oauth&#x2F;access_token</span><br><span class="line">.post(body)</span><br><span class="line">.build();</span><br><span class="line">try (Response response &#x3D; client.newCall(request).execute()) &#123;</span><br><span class="line">String string &#x3D; response.body().string();</span><br><span class="line">JSONObject jsonObject  &#x3D; JSONObject.parseObject(string); &#x2F;&#x2F;将String转换为json串</span><br><span class="line">String token &#x3D; jsonObject.getString(&quot;access_token&quot;); &#x2F;&#x2F;获取json串中key为access_token的值</span><br><span class="line">&#x2F;&#x2F;String token &#x3D; string.split(&quot;&amp;&quot;)[0].split(&quot;&#x3D;&quot;)[1];&#x2F;&#x2F;这里Github和Gitee不同，Github返回的是一个地址，Gitee返回的是json串。</span><br><span class="line">return token;</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用token获取用户数据<br>获取User信息的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public GithubUser getUser(String accessToken)&#123;</span><br><span class="line">OkHttpClient client &#x3D; new OkHttpClient();</span><br><span class="line">Request request &#x3D; new Request.Builder()</span><br><span class="line">.url(&quot;https:&#x2F;&#x2F;gitee.com&#x2F;api&#x2F;v5&#x2F;user?access_token&#x3D;&quot; + accessToken)&#x2F;&#x2F;https:&#x2F;&#x2F;api.github.com&#x2F;user?access_token&#x3D;</span><br><span class="line">.build();</span><br><span class="line">try &#123;</span><br><span class="line">Response response &#x3D; client.newCall(request).execute();</span><br><span class="line">String string &#x3D; response.body().string();</span><br><span class="line">GithubUser githubUser &#x3D; JSON.parseObject(string, GithubUser.class);</span><br><span class="line">return githubUser;</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">&#125;</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是调用Gitee/Github API实现第三方登录流程</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-创建一个Gitee-Github第三方应用&quot;&gt;&lt;a href=&quot;#1-创建一个Gitee-Github第三方应用&quot; class=&quot;headerlink&quot; title=&quot;1.创建一个Gitee/Github第三方应用&quot;&gt;&lt;/a&gt;1.创建一个Gitee/Github第三方应用&lt;/h2&gt;&lt;p&gt;这里以Gitee为例&lt;br&gt;&lt;img src=&quot;/2020/03/24/%E8%B0%83%E7%94%A8Gitee-Github-API%E5%AE%9E%E7%8E%B0%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95%E6%B5%81%E7%A8%8B/NewGiteeOAuthApp.JPG&quot; alt=&quot;创建Gitee第三方应用&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;2-新建两个java类用来储存获取的Gitee-Github用户信息和获取token所需的参数&quot;&gt;&lt;a href=&quot;#2-新建两个java类用来储存获取的Gitee-Github用户信息和获取token所需的参数&quot; class=&quot;headerlink&quot; title=&quot;2.新建两个java类用来储存获取的Gitee/Github用户信息和获取token所需的参数&quot;&gt;&lt;/a&gt;2.新建两个java类用来储存获取的Gitee/Github用户信息和获取token所需的参数&lt;/h2&gt;&lt;p&gt;储存Github/Gitee用户信息类，生成get/set方法，我这里为了省空间就不写了&lt;/p&gt;
    
    </summary>
    
    
      <category term="分享" scheme="http://thexwen.github.io/categories/%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="API" scheme="http://thexwen.github.io/tags/API/"/>
    
      <category term="Github" scheme="http://thexwen.github.io/tags/Github/"/>
    
      <category term="Gitee" scheme="http://thexwen.github.io/tags/Gitee/"/>
    
  </entry>
  
  <entry>
    <title>jQuery动态生成的元素绑定事件</title>
    <link href="http://thexwen.github.io/2020/03/24/jQuery%E5%8A%A8%E6%80%81%E7%94%9F%E6%88%90%E7%9A%84%E5%85%83%E7%B4%A0%E7%BB%91%E5%AE%9A%E4%BA%8B%E4%BB%B6/"/>
    <id>http://thexwen.github.io/2020/03/24/jQuery%E5%8A%A8%E6%80%81%E7%94%9F%E6%88%90%E7%9A%84%E5%85%83%E7%B4%A0%E7%BB%91%E5%AE%9A%E4%BA%8B%E4%BB%B6/</id>
    <published>2020-03-24T11:43:41.000Z</published>
    <updated>2020-03-24T11:55:58.891Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>前几天写代码的时候遇到一个问题，通过引入的js文件动态生成的元素绑定单击事件不起作用。于是去查找下资料，发现动态生成的元素无法使用click方法绑定。如果需要给动态的元素绑定事件，需要使用到on()方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#comment&quot;).on(&quot;click&quot;,&quot;button&quot;,function()&#123;</span><br><span class="line">&lt;!-- 这里写方法的内容 --&gt;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>on()方法，可以给未来的元素绑定事件<br>使用方法：<br>1、先选中动态生成元素的父元素 如：#comment<br>2、然后绑定事件<br>3、再选中子类                  如：button<br>可以理解为给id为comment的元素下的button元素包括未来的button元素绑定click事件,这是比较通俗易懂的理解，详细内容可以看文档的具体说明</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="问题" scheme="http://thexwen.github.io/categories/%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="问题" scheme="http://thexwen.github.io/tags/%E9%97%AE%E9%A2%98/"/>
    
      <category term="jquery" scheme="http://thexwen.github.io/tags/jquery/"/>
    
  </entry>
  
  <entry>
    <title>使用js jquery分别获取地址栏参数值</title>
    <link href="http://thexwen.github.io/2020/03/21/%E4%BD%BF%E7%94%A8js-jquery%E5%88%86%E5%88%AB%E8%8E%B7%E5%8F%96%E5%9C%B0%E5%9D%80%E6%A0%8F%E5%8F%82%E6%95%B0%E5%80%BC/"/>
    <id>http://thexwen.github.io/2020/03/21/%E4%BD%BF%E7%94%A8js-jquery%E5%88%86%E5%88%AB%E8%8E%B7%E5%8F%96%E5%9C%B0%E5%9D%80%E6%A0%8F%E5%8F%82%E6%95%B0%E5%80%BC/</id>
    <published>2020-03-20T16:15:56.000Z</published>
    <updated>2020-03-20T16:26:34.646Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="使用JS获取地址栏参数值"><a href="#使用JS获取地址栏参数值" class="headerlink" title="使用JS获取地址栏参数值"></a>使用JS获取地址栏参数值</h2><p>方法一：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function GetQueryString(name) &#123;</span><br><span class="line">    var reg &#x3D; new RegExp(&quot;(^|&amp;)&quot;+ name +&quot;&#x3D;([^&amp;]*)(&amp;|$)&quot;);</span><br><span class="line">    var r &#x3D; window.location.search.substr(1).match(reg);</span><br><span class="line">    if(r!&#x3D;null)return  unescape(r[2]); return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>调用方法GetQueryString(“参数名”);<br>方法二:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;** </span><br><span class="line">  * 获取指定URL的参数值 </span><br><span class="line">  * @param url  指定的URL地址 </span><br><span class="line">  * @param name 参数名称 </span><br><span class="line">  * @return 参数值 </span><br><span class="line">*&#x2F;  </span><br><span class="line"> function getUrlParam(url,name) &#123;  </span><br><span class="line">     var pattern &#x3D; new RegExp(&quot;[?&amp;]&quot;+name+&quot;\&#x3D;([^&amp;]+)&quot;, &quot;g&quot;);  </span><br><span class="line">     var matcher &#x3D; pattern.exec(url);  </span><br><span class="line">     var items &#x3D; null;  </span><br><span class="line">     if(null !&#x3D; matcher)&#123;  </span><br><span class="line">             try&#123;  </span><br><span class="line">                    items &#x3D; decodeURIComponent(decodeURIComponent(matcher[1]));  </span><br><span class="line">             &#125;catch(e)&#123;  </span><br><span class="line">                     try&#123;  </span><br><span class="line">                             items &#x3D; decodeURIComponent(matcher[1]);  </span><br><span class="line">                     &#125;catch(e)&#123;  </span><br><span class="line">                             items &#x3D; matcher[1];  </span><br><span class="line">                     &#125;  </span><br><span class="line">             &#125;  </span><br><span class="line">     &#125;  </span><br><span class="line">     return items;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用方法getUrlParam(document.href,”参数名”);</p><h2 id="使用jQuery获取地址栏参数"><a href="#使用jQuery获取地址栏参数" class="headerlink" title="使用jQuery获取地址栏参数"></a>使用jQuery获取地址栏参数</h2><p>使用下面的方式为jquery扩展一个方法来获取url参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(function ($) &#123;</span><br><span class="line">    $.getUrlParam &#x3D; function (name) &#123;</span><br><span class="line">        var reg &#x3D; new RegExp(&quot;(^|&amp;)&quot; + name + &quot;&#x3D;([^&amp;]*)(&amp;|$)&quot;);</span><br><span class="line">        var r &#x3D; window.location.search.substr(1).match(reg);</span><br><span class="line">        if (r !&#x3D; null) return unescape(r[2]); return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(jQuery);</span><br></pre></td></tr></table></figure><p>调用方法$.getUrlParam(“参数名”);</p><p>注意:javascript对参数编码解码方法要一致</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;使用JS获取地址栏参数值&quot;&gt;&lt;a href=&quot;#使用JS获取地址栏参数值&quot; class=&quot;headerlink&quot; title=&quot;使用JS获取地址栏参数值&quot;&gt;&lt;/a&gt;使用JS获取地址栏参数值&lt;/h2&gt;&lt;p&gt;方法一：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function GetQueryString(name) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var reg &amp;#x3D; new RegExp(&amp;quot;(^|&amp;amp;)&amp;quot;+ name +&amp;quot;&amp;#x3D;([^&amp;amp;]*)(&amp;amp;|$)&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var r &amp;#x3D; window.location.search.substr(1).match(reg);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if(r!&amp;#x3D;null)return  unescape(r[2]); return null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="问题" scheme="http://thexwen.github.io/categories/%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="问题" scheme="http://thexwen.github.io/tags/%E9%97%AE%E9%A2%98/"/>
    
      <category term="jquery" scheme="http://thexwen.github.io/tags/jquery/"/>
    
      <category term="js" scheme="http://thexwen.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>简单好用的jquery分页插件</title>
    <link href="http://thexwen.github.io/2020/03/18/%E7%AE%80%E5%8D%95%E5%A5%BD%E7%94%A8%E7%9A%84jquery%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6/"/>
    <id>http://thexwen.github.io/2020/03/18/%E7%AE%80%E5%8D%95%E5%A5%BD%E7%94%A8%E7%9A%84jquery%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6/</id>
    <published>2020-03-18T06:40:43.000Z</published>
    <updated>2020-03-20T16:26:50.574Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>昨天写项目的时候要用到分页功能，于是去找了一下jquery分页插件。以前有到一个分页插件，但是样式不太好看。在jquery插件库找到一个简单好用的分页插件，分享一下<a href="http://www.jq22.com/jquery-info22247" target="_blank" rel="noopener">jQuery分页插件</a><br>样式如下</p><a id="more"></a><p><img src="/2020/03/18/%E7%AE%80%E5%8D%95%E5%A5%BD%E7%94%A8%E7%9A%84jquery%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6/jQueryPaging.JPG" alt="jquery分页插件"><br>使用步骤：<br>1.下载解压后，将js和css文件导入项目<br>2.在html页面中找到一个合适的位置插入代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;pagination1&quot; class&#x3D;&quot;page fl&quot;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>3.新建一个js文件，添加js代码，在html中引入js文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#pagination1&quot;).pagination(&#123;</span><br><span class="line">                        currentPage: page.pageno, &lt;!-- 当前所在页码 --&gt;</span><br><span class="line">                        totalPage: page.totalno,  &lt;!-- 总页码 --&gt;</span><br><span class="line">                        callback: queryPage  &lt;!-- 回调函数 --&gt;</span><br><span class="line">                    &#125;);</span><br></pre></td></tr></table></figure><p>刷新页面，生成分页条</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天写项目的时候要用到分页功能，于是去找了一下jquery分页插件。以前有到一个分页插件，但是样式不太好看。在jquery插件库找到一个简单好用的分页插件，分享一下&lt;a href=&quot;http://www.jq22.com/jquery-info22247&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;jQuery分页插件&lt;/a&gt;&lt;br&gt;样式如下&lt;/p&gt;
    
    </summary>
    
    
      <category term="分享" scheme="http://thexwen.github.io/categories/%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="jquery" scheme="http://thexwen.github.io/tags/jquery/"/>
    
      <category term="插件" scheme="http://thexwen.github.io/tags/%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>外部引入js文件不生效解决方法</title>
    <link href="http://thexwen.github.io/2020/03/14/%E5%A4%96%E9%83%A8%E5%BC%95%E5%85%A5js%E6%96%87%E4%BB%B6%E4%B8%8D%E7%94%9F%E6%95%88%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>http://thexwen.github.io/2020/03/14/%E5%A4%96%E9%83%A8%E5%BC%95%E5%85%A5js%E6%96%87%E4%BB%B6%E4%B8%8D%E7%94%9F%E6%95%88%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</id>
    <published>2020-03-14T13:47:24.000Z</published>
    <updated>2020-03-18T07:00:28.412Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>今天写项目的时候，有用到js，本来是代码是直接写在<script type="text/javascript"></script>里面的，但突然想将它分离，通过外部引入。但是引入后发现不生效，于是去找资料。大多数都是说加上<code>window.οnlοad=function(){}</code>将代码放在里面就可以了，但是我试了一下好像不行。最后发现原来js在文件内部是不用<code>$(function(){})</code>也能自动执行。而在外部加载时，由于没有<code>$(function(){})</code>就不执行了。于是在js最头部加上<code>$(function(){})</code>，问题解决.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="问题" scheme="http://thexwen.github.io/categories/%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="问题" scheme="http://thexwen.github.io/tags/%E9%97%AE%E9%A2%98/"/>
    
      <category term="js" scheme="http://thexwen.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>我的博客搭建全过程(1)</title>
    <link href="http://thexwen.github.io/2020/03/11/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%85%A8%E8%BF%87%E7%A8%8B/"/>
    <id>http://thexwen.github.io/2020/03/11/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%85%A8%E8%BF%87%E7%A8%8B/</id>
    <published>2020-03-11T13:00:31.000Z</published>
    <updated>2020-03-18T08:20:56.846Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h2><p>在开始一切之前<br>    1.1需要一个github账号，没有的话去注册一个；<br>    1.2安装<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">Git</a><br>    1.3安装<a href="https://nodejs.org/en/" target="_blank" rel="noopener">nodejs</a></p><h2 id="2-创建github仓库"><a href="#2-创建github仓库" class="headerlink" title="2.创建github仓库"></a>2.创建github仓库</h2><a id="more"></a><p>新建一个名为你的用户名.github.io的仓库，比如说，如果你的github用户名是test，那么你就新建test.github.io的仓库（必须是你的用户名，其它名称无效），将来你的网站访问地址就是<a href="http://test.github.io了" target="_blank" rel="noopener">http://test.github.io了</a><br><img src="/2020/03/11/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%85%A8%E8%BF%87%E7%A8%8B/CreateLib.JPG" alt="创建github仓库"><br>因为每一个github账户最多只能创建一个这样可以直接使用域名访问的仓库，我之前已经创建过了。</p><h2 id="3-配置SSH-key"><a href="#3-配置SSH-key" class="headerlink" title="3.配置SSH key"></a>3.配置SSH key</h2><p>因为你提交代码肯定要拥有你的github权限才可以，但是直接使用用户名和密码太不安全了，所以我们使用ssh key来解决本地和服务器的连接问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~&#x2F;. ssh #检查本机已存在的ssh密钥</span><br></pre></td></tr></table></figure><p>如果提示：No such file or directory 说明你是第一次使用git。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;邮件地址&quot;</span><br></pre></td></tr></table></figure><p>然后连续3次回车，最终会生成一个文件在用户目录下，打开用户目录，找到.ssh\id_rsa.pub文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置-&gt;SSH and GPG keys-&gt;New SSH key;将刚复制的内容粘贴到key那里，title随便填，保存。</p><h2 id="4-使用hexo搭建个人博客"><a href="#4-使用hexo搭建个人博客" class="headerlink" title="4.使用hexo搭建个人博客"></a>4.使用hexo搭建个人博客</h2><h3 id="4-1安装之前说几个注意事项："><a href="#4-1安装之前说几个注意事项：" class="headerlink" title="4.1安装之前说几个注意事项："></a>4.1安装之前说几个注意事项：</h3><p>1.很多命令既可以用Windows的cmd来完成，也可以使用git bash来完成，但是部分命令会有一些问题，为避免不必要的问题，建议全部使用git bash来执行；<br>2.hexo有2种<code>_config.yml</code>文件，一个是根目录下的全局的<code>_config.yml</code>，一个是各个theme下的；</p><h3 id="4-2安装hexo"><a href="#4-2安装hexo" class="headerlink" title="4.2安装hexo"></a>4.2安装hexo</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="4-3创建博客文件夹"><a href="#4-3创建博客文件夹" class="headerlink" title="4.3创建博客文件夹"></a>4.3创建博客文件夹</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;你的文件夹名字&gt; #如 hexo init thexwen</span><br></pre></td></tr></table></figure><p>注意:他会在你命令当前路径下创建一个文件夹，这个文件夹将来就作为你存放代码的地方，所以最好不要随便放。</p><h3 id="4-4初始化文件夹"><a href="#4-4初始化文件夹" class="headerlink" title="4.4初始化文件夹"></a>4.4初始化文件夹</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd &lt;folder&gt; #进入你的博客文件夹</span><br><span class="line">$ npm install #初始化文件夹</span><br></pre></td></tr></table></figure><p>初始化后，您的项目文件夹将如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><h3 id="4-5编写第一篇博客"><a href="#4-5编写第一篇博客" class="headerlink" title="4.5编写第一篇博客"></a>4.5编写第一篇博客</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new &quot;你的博客名称&quot;</span><br></pre></td></tr></table></figure><p>执行上面命令，在你的…\source_posts下会生产一个.md文件，打开文件就可以编写你的博客</p><h3 id="4-6访问你的博客"><a href="#4-6访问你的博客" class="headerlink" title="4.6访问你的博客"></a>4.6访问你的博客</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate #生成静态文件</span><br><span class="line">$ hexo server#启动本地服务器。默认情况下，该位置为http:&#x2F;&#x2F;localhost:4000&#x2F;</span><br></pre></td></tr></table></figure><p>执行上面两条命令，打开浏览器访问 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 即可看到内容，第一次初始化的时候hexo已经帮我们写了一篇名为 Hello World 的文章，默认的主题比较丑。<br><img src="/2020/03/11/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%85%A8%E8%BF%87%E7%A8%8B/BlogSite.png" alt="博客站点"></p><h2 id="5-部署到github"><a href="#5-部署到github" class="headerlink" title="5.部署到github"></a>5.部署到github</h2><p>如果你一切都配置好了，发布上传很容易，一句命令就搞定，当然关键还是你要把所有东西配置好。<br>首先，ssh key肯定要配置好。<br>其次，配置_config.yml中有关deploy的部分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">type: git</span><br><span class="line">repo: https:&#x2F;&#x2F;github.com&#x2F;你的github名称&#x2F;你的github名称.github.io.git #如https:&#x2F;&#x2F;github.com&#x2F;TheXWen&#x2F;thexwen.github.io.git</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure><p>另外我们还需要额外安装一个支持 Git 的部署插件，名字叫做 hexo-deployer-git，有了它我们才可以顺利将其部署到 GitHub 上面，如果不安装的话，在执行部署命令时会报如下错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Deployer not found: git</span><br></pre></td></tr></table></figure><p>在项目目录下执行安装命令如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>安装成功之后，执行部署命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>这时候我们访问一下 GitHub Repository 同名的链接，比如我的 thexwen 博客的 Repository 名称取的是 thexwen.github.io，那我就访问 <a href="http://thexwen.github.io，这时候我们就可以看到跟本地一模一样的博客内容了。" target="_blank" rel="noopener">http://thexwen.github.io，这时候我们就可以看到跟本地一模一样的博客内容了。</a></p><h2 id="6-配置站点信息"><a href="#6-配置站点信息" class="headerlink" title="6.配置站点信息"></a>6.配置站点信息</h2><p>完成如上内容之后，实际上我们只完成了博客搭建的一小步，因为我们仅仅是把初始化的页面部署成功了，博客里面还没有设置任何有效的信息.<br>修改根目录下的 _config.yml 文件，找到 Site 区域，这里面可以配置站点标题 title、副标题 subtitle 等内容、关键字 keywords 等内容，比如我的就修改为如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: xw&#39;s Blog #标题</span><br><span class="line">subtitle: 记录,分享 #副标题</span><br><span class="line">description: make an all-out effort #描述</span><br><span class="line">keywords: &quot;java,问题,个人&quot; #关键字</span><br><span class="line">author: xw #作者</span><br><span class="line">language: zh-CN #中文</span><br><span class="line">timezone: &#39;&#39; #时区</span><br></pre></td></tr></table></figure><p>以上就是从零简单搭建一个 Hexo 博客的流程，希望对大家有帮助。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-准备工作&quot;&gt;&lt;a href=&quot;#1-准备工作&quot; class=&quot;headerlink&quot; title=&quot;1.准备工作&quot;&gt;&lt;/a&gt;1.准备工作&lt;/h2&gt;&lt;p&gt;在开始一切之前&lt;br&gt;    1.1需要一个github账号，没有的话去注册一个；&lt;br&gt;    1.2安装&lt;a href=&quot;https://git-scm.com/download/win&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Git&lt;/a&gt;&lt;br&gt;    1.3安装&lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;nodejs&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;2-创建github仓库&quot;&gt;&lt;a href=&quot;#2-创建github仓库&quot; class=&quot;headerlink&quot; title=&quot;2.创建github仓库&quot;&gt;&lt;/a&gt;2.创建github仓库&lt;/h2&gt;
    
    </summary>
    
    
      <category term="hexo博客" scheme="http://thexwen.github.io/categories/hexo%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="博客" scheme="http://thexwen.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Hexo" scheme="http://thexwen.github.io/tags/Hexo/"/>
    
      <category term="Next" scheme="http://thexwen.github.io/tags/Next/"/>
    
  </entry>
  
  <entry>
    <title>我的第一台阿里服务器</title>
    <link href="http://thexwen.github.io/2020/03/11/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E5%8F%B0%E9%98%BF%E9%87%8C%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://thexwen.github.io/2020/03/11/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E5%8F%B0%E9%98%BF%E9%87%8C%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2020-03-11T04:54:02.000Z</published>
    <updated>2020-03-11T09:50:16.492Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>前段时间一直想买一台阿里的服务器，但是没有碰到活动。昨天上去看看发现阿里在搞活动，<img src="/2020/03/11/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E5%8F%B0%E9%98%BF%E9%87%8C%E6%9C%8D%E5%8A%A1%E5%99%A8/19-03-11-aly.JPG" alt="阿里云活动"><br>果断入手一台，哈哈。本来是想用来搭建博客的，但是想着马上要找实习了，博客也没什么东西，就算了。还是拿来挂项目吧</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="个人" scheme="http://thexwen.github.io/categories/%E4%B8%AA%E4%BA%BA/"/>
    
    
      <category term="服务器" scheme="http://thexwen.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="http://thexwen.github.io/2020/03/11/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <id>http://thexwen.github.io/2020/03/11/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</id>
    <published>2020-03-10T18:44:02.000Z</published>
    <updated>2020-03-10T20:16:30.800Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="我的第一篇博客"><a href="#我的第一篇博客" class="headerlink" title="我的第一篇博客"></a>我的第一篇博客</h2><p>这是我的第一篇博客</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://thexwen.github.io/2020/03/10/hello-world/"/>
    <id>http://thexwen.github.io/2020/03/10/hello-world/</id>
    <published>2020-03-10T15:37:03.799Z</published>
    <updated>2020-03-18T08:22:21.237Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><a id="more"></a><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
